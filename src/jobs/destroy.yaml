# /src/jobs/destroy.yaml

description: Run terraform destroy using configurable backend and optional workspace

executor:
  name: di-circleci-infra-image
  tag: << parameters.tag >>
environment:
  TF_WORKSPACE: << parameters.workspace >>
shell: << parameters.shell >>

parameters:

  shell:
    description: default shell invocation. Override to support different shells or tools like secrethub.io
    type: string
    default: /bin/sh -eo pipefail

  workspace:
    description: terraform workspace (infrastructure environment) name
    type: string
    default: ""

  tag:
    description: infra image tag of the executor
    type: string
    default: stable

  var-file:
    description: terraform variable file to include in plan, apply, output, and destroy commands
    type: string
    default: ""

  working-directory:
    description: specify a specific folder in which to run the commands
    type: string
    default: "."

  backend-conf:
    description: additional terraform init parameters to configure backend.conf if necessary
    type: string
    default: ""

  before-terraform:
    description: Optional steps to run before running terraform plan.
    type: steps
    default: []

  after-terraform-init:
    description: Optional steps to run after terraform init but before running terraform plan
    type: steps
    default: []

  after-terraform:
    description: Optional steps to run after running terraform plan.
    type: steps
    default: []

steps:
  - checkout
  - setup_remote_docker
  - when:
      name: Run before-terraform lifecycle hook steps
      condition: << parameters.before-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.before-terraform >>
  - run:
      name: terraform init
      working_directory: << parameters.working-directory >>
      command: terraform init <<#parameters.backend-conf>> << parameters.backend-conf >> <</parameters.backend-conf>>
  - when:
      name: Run after-terraform-init lifecycle hook steps
      condition: << parameters.after-terraform-init >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform-init >>
  - run:
      name: terraform destroy
      working_directory: << parameters.working-directory >>
      command: terraform destroy <<#parameters.var-file>> -var-file=<< parameters.var-file >> <</parameters.var-file>> --auto-approve
  - when:
      name: Run after-terraform lifecycle hook steps
      condition: << parameters.after-terraform >>
      working_directory: << parameters.working-directory >>
      steps: << parameters.after-terraform >>
